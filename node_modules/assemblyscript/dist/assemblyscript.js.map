{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","lineCache","lineColumn","SOURCE","sourceKind","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_new","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","varargsStub","virtualStub","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","postfix","stub","clone","COMPILED","STUB","locals","sourceMap","setDebugLocation","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","toBound","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","implementers","asClass","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","getTypeArgumentsTo","abvInstance","acyclic","hasCycle","cyclesTo","except","fieldType","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","BinaryOp","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","MemorySegment","segment","Module","hasTemporaryFunction","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","SideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","UNLIMITED_TABLE","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","labels","local_set","br","binary","EqI32","local_get","defaultLabel","unshift","lastCase","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperand","TupleExtract","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","numParameters","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","numParameterNames","cloneParameterNames","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","Not_implemented","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","delete","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","global_get","addFunction","nativeSizeSize","blocks","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","fromName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","namespaceMembers","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","thisArg","functionTarget","compileCallIndirect","BuiltinContext","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","newExpr","oldExpr","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","isCallOnSuper","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","nativeArrayType","dataStartMember","bufferSize","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","ctor","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","console","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","gt","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","getSource","parseFile","nextFile","getDependee","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitIndexSignatureDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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ARtV,EAAkB,OAAOkT,EAAMqC,OACnC,MAEF,KAAK,IACH,GAAY,OAARvV,EAAe,OAAOkT,EAAMsC,IAChC,GAAY,QAARxV,EAAgB,OAAOkT,EAAMhE,KACjC,MAEF,KAAK,IACH,GAAY,SAARlP,EAAiB,OAAOkT,EAAM9D,MAClC,GAAY,QAARpP,EAAgB,OAAOkT,EAAMuC,KACjC,MAEF,KAAK,IACH,GAAY,SAARzV,EAAiB,OAAOkT,EAAMwC,MAItC,OAAOxC,EAAMyC,QAGf,SAAgBC,EAAsBC,GACpC,OAAQA,GACN,KAAK3C,EAAMG,SACX,KAAKH,EAAMI,GACX,KAAKJ,EAAMvN,YACX,KAAKuN,EAAMW,QACX,KAAKX,EAAMa,OACX,KAAKb,EAAMkB,KACX,KAAKlB,EAAMxG,IACX,KAAKwG,EAAMmB,IACX,KAAKnB,EAAM1M,WACX,KAAK0M,EAAMuB,GACX,KAAKvB,EAAMwB,MACX,KAAKxB,EAAM0B,OACX,KAAK1B,EAAM2B,UACX,KAAK3B,EAAMnM,KACX,KAAKmM,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAMhE,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYgE,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0B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O6K,GAAG,EAAA/4B,YAAYy8B,UAAW2K,IAC/ED,EAAa,EAAA9mC,mBAAqB,EAAAC,kBAAoB/B,GA/JpE,0BAA+B6lC,EAG7B,YAEE1D,EAEA9gC,EAEAgN,EAA+B,MAE/B0P,MACEokB,EACA9gC,EACAgN,GACA,KA8HN,wB,28CC/0IA,aACA,QAoBA,IAAiBy6B,EAeLC,EAeAC,EAwKAC,GAtMZ,SAAiBH,GACF,EAAAI,KAAmB,EACnB,EAAAC,YAA0B,EAC1B,EAAAhjC,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAQ,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAC,KAAmB,EACnB,EAAAsiC,QAAsB,EACtB,EAAAriC,OAAqB,EACrB,EAAAsiC,QAAsB,EACtB,EAAAC,OAAqB,GACrB,EAAAC,MAAoB,EAZnC,CAAiBT,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYQ,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAjHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KAoHnB,SAAYP,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCAnLF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAsLpB,SAAYQ,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYC,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,qCACA,uCACA,uCACA,uCACA,uCAVF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAatB,SAAYC,GACV,yBACA,iDACA,qCAHF,CAAY,EAAAA,wBAAA,EAAAA,sBAAqB,KAMjC,MAAaC,EAKX,cAAchb,EAAoBC,GAChC,IAAIgb,EAAU,IAAID,EAGlB,OAFAC,EAAQjb,OAASA,EACjBib,EAAQhb,OAASA,EACVgb,GATX,kBAaA,kBAAaC,EAsBX,cAulBQ,KAAAC,sBAA6B,EA6hB7B,KAAAC,cA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CA,yLACA,6IACA,uIACA,uIACA,+GACA,iGACA,yHACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MAxKF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA4K1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,k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S,EAAM1S,EAAeS,OACzB,GAAIiS,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGV1S,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAAS0S,EAAM,GACb,GA7Gc,IA6GV1S,EAAeW,WAAW+R,GAC5B,OAAO1S,EAAea,UAAU,EAAG6R,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4B1S,EAAwBwoH,GAClD,OAAIxoH,EAAeiL,WAAW,QACrBjL,EAEFgL,EACLu9G,EAAQC,GAAU,EAAA3yH,eAAiBmK,IAKvC,a,sPC3GA,SAAkByoH,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bx0H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkC+K,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC/K,GAChC,MAAMy0H,EAAS,GAAJz0H,EACX,OAAOy0H,GAAM,IAAcA,GAAM,KACrB,IAALz0H,GACK,IAALA,GACAA,EAAI,SAmLqB+K,EAnLY/K,GAoL9B,KAAO+K,EAAO,QACrB2pH,EAAmB3pH,EAAa4pH,IAFzC,IAAkC5pH,GA/KlC,8BAAmC/K,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMy0H,EAAS,GAAJz0H,EACX,OAAOy0H,GAAM,IAAcA,GAAM,KAC1Bz0H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB+K,EAzKY/K,GA0K7B,KAAO+K,EAAO,QACrB2pH,EAAmB3pH,EAAa6pH,IAFzC,IAAiC7pH,GArKjC,MAAM4pH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a stub. */\n  STUB = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    initializer: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.initializer = initializer;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = normalizedPath;\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = normalizedPath;\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = normalizedPath;\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  /** Checks if this is a call calling a method on super. */\n  get isCallOnSuper(): bool {\n    if (this.kind != NodeKind.CALL) return false;\n    var expression = changetype<CallExpression>(this).expression;\n    if (expression.kind != NodeKind.PROPERTYACCESS) return false;\n    var target = (<PropertyAccessExpression>expression).expression;\n    if (target.kind == NodeKind.SUPER) return true;\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST + \".wasm\", \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        assert(!interfacePrototypes);\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        assert(!basePrototype);\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                declaration.name,\n                typeNode,\n                null,\n                ParameterKind.DEFAULT,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null, null, null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.f32ArrayPrototype) return Type.f32;\n        if (prototype == program.f64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.i8ArrayPrototype) return Type.i8;\n        if (prototype == program.i16ArrayPrototype) return Type.i16;\n        if (prototype == program.i32ArrayPrototype) return Type.i32;\n        if (prototype == program.i64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.u8ArrayPrototype) return Type.u8;\n        if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.u16ArrayPrototype) return Type.u16;\n        if (prototype == program.u32ArrayPrototype) return Type.u32;\n        if (prototype == program.u64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Anyref: NativeType = 8 /* _BinaryenTypeAnyref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */,\n  TupleMake = 47 /* _BinaryenTupleMakeId */,\n  TupleExtract = 48 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 88 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 89 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 90 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 91 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 92 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 93 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 94 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 95 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 96 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 97 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 98 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 99 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 100 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 101 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 102 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 103 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 104 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 105 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 106 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 162 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 163 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 164 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 165 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 166 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 167 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 168 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 169 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 170 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 171 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 172 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 173 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 174 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 175 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 176 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // tuples (pseudo instructions)\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    binaryen._BinaryenSetOptimizeLevel(optimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(shrinkLevel);\n    binaryen._BinaryenSetDebugInfo(debugInfo);\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel === 0) {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(12);\n      binaryen._BinaryenSetFlexibleInlineMaxSize(70);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(200);\n    } else {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      binaryen._BinaryenSetFlexibleInlineMaxSize(65);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(80);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"ssa-nomerge\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n      if (usesARC) {\n        if (optimizeLevel < 3) {\n          passes.push(\"flatten\");\n        }\n        passes.push(\"post-assemblyscript\");\n      }\n      passes.push(\"optimize-instructions\");\n      passes.push(\"inlining\");\n      passes.push(\"dce\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n      }\n      passes.push(\"vacuum\");\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (binaryen._BinaryenGetLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals-nostructure\");\n          passes.push(\"vacuum\");\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case <u32>NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(expr: ExpressionRef, flags: ExpressionRunnerFlags, maxDepth: i32 = 50, maxLoopIterations: i32 = 1): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.is(TypeFlags.REFERENCE)) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.is(TypeFlags.NULLABLE) == other.is(TypeFlags.NULLABLE)\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    var clone = new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n    var parameterNames = this.parameterNames;\n    if (parameterNames) {\n      let numParameterNames = parameterNames.length;\n      let cloneParameterNames = new Array<string>(numParameterNames);\n      for (let i = 0; i < numParameterNames; ++i) {\n        cloneParameterNames[i] = parameterNames[i];\n      }\n      clone.parameterNames = cloneParameterNames;\n    }\n    return clone;\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          makeMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.is(TypeFlags.VALUE)) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let nativeElementType = elementType.toNativeType();\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = compiler.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.is(CommonFlags.INSTANCE)\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance)\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          this.pedantic(\n            DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n            instance.identifierNode.range\n          );\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    assert(this.writeStaticBuffer(buf, runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    functionTable.push(instance);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp;\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let namespaceMembers = namespace.members;\n            if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = assert(namespaceMembers.get(CommonNames.pow));\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let namespaceMembers = namespace.members;\n            if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = assert(namespaceMembers.get(CommonNames.pow));\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          this.compileExpression(\n            assert(thisExpression),\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let superCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    assert(!instance.is(CommonFlags.VIRTUAL));\n\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 0; n < numParameters; ++n) {\n            paramExprs[1 + n] = module.local_get(1 + n, parameterTypes[n].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n]);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isCallOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(Type.i32, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, NativeType.I32)\n      ], NativeType.I32);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], NativeType.I32);\n    }\n    var expr = module.call_indirect(\n      indexArg,\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let thisType = assert(actualFunction.signature.thisType);\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          flow.set(FlowFlags.ACCESSES_THIS);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(<Expression>expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.classReference;\n    if (!contextualType.is(TypeFlags.REFERENCE) || !classReference || classReference.kind != ElementKind.CLASS) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by default ctor\n      }\n\n      if (fieldType.is(TypeFlags.REFERENCE) && fieldType.classReference !== null) {\n        // TODO: Check if it is a class, with a default value (constructor with no params).\n        if (!fieldType.is(TypeFlags.NULLABLE)) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(classReference, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        null,\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        null,\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT\n        );\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  IndexSignatureDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  DeclarationStatement,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATUREDECLARATION: {\n        this.visitIndexSignatureDeclaration(<IndexSignatureDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(statement: Statement): void {\n    this.visitNode(statement);\n    var sb = this.sb;\n    if (\n      !sb.length ||                          // leading EmptyStatement\n      statement.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      statement.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignatureDeclaration(node: IndexSignatureDeclaration): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.arguments;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}